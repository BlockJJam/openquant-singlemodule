# author: jaemin.joo
# Legacy CI script for harbor( CD script: ArgoCD)
# Using:
# - docker
# - variables:$HARBOR_HOST, $HARBOR_SPRING_USER, $HARBOR_SPRING_PASSWORD, $HARBOR_SPRING_DOMAIN, $APP, $PROJECT, $MAIN_VERSION,
# test
stages:
#  - build_main
#  - docker_main
#  - build_product
#  - docker_product
  - update_deploy_repo

## @desc: gitlab SaaS를 활용하지 않고 CI서버를 설치하여 사용하기 때문에, shell script 명령어를 사용하면서 docker 이미지가 아닌 OS에 java를 직접 설치해주고 다음 gradle-build를 사용한다
#gradle-build_main:
#  tags:
#    - Legacy
#  stage: build_main
#  only:
#    - main
#  retry: 2
#  script:
#    - ./gradlew clean build
#  artifacts:
#    paths:
#      - build/libs/*.jar
#    expire_in: 30 days
#
#docker_build_main:
#  tags:
#    - Legacy
#  only:
#    - main
#  stage: docker_main
#  retry: 2
#  before_script:
#    - echo "$HARBOR_HOST ,$HARBOR_SPRING_USER, $HARBOR_SPRING_PASSWORD, $HARBOR_DOMAIN"
#    - echo "$HARBOR_SPRING_PASSWORD" | docker login $HARBOR_HOST -u "$HARBOR_SPRING_USER" --password-stdin
#  script:
#    - pwd
#    - ls
#    # copy: no source 에러의 경우 context( build를 실행한 시점의 현 디렉토리)의 위치가 local 환경과 다르기 때문에 docker build가 실행되는 디랙터리 위치를 파악해야 한다
#    - docker build -t $APP:$MAIN_VERSION --no-cache .
#    - docker tag $APP:$MAIN_VERSION $HARBOR_DOMAIN/$PROJECT/$APP:$MAIN_VERSION
#    # latest version ArgoCD에서 확인할 수 있도록 추가
#    - docker tag $HARBOR_DOMAIN/$PROJECT/$APP:$MAIN_VERSION $HARBOR_DOMAIN/$PROJECT/$APP:latest
#    - docker push $HARBOR_DOMAIN/$PROJECT/$APP:$MAIN_VERSION
#    - docker push $HARBOR_DOMAIN/$PROJECT/$APP:latest
#
## production 환경
#gradle-build_product:
#  tags:
#    - Legacy
#  stage: build_product
#  only:
#    - production
#    - retry: 2
#  script:
#    - ./gradlew clean build
#  artifacts:
#    paths:
#      - build/libs/*.jar
#    expire_in: 30 days
#
#docker_build_product:
#  tags:
#    - Legacy
#  only:
#    - production
#  stage: docker_product
#  retry: 2
#  before_script:
#    - echo "$HARBOR_HOST ,$HARBOR_SPRING_USER, $HARBOR_SPRING_PASSWORD, $HARBOR_DOMAIN"
#    - echo "$HARBOR_SPRING_PASSWORD" | docker login $HARBOR_HOST -u "$HARBOR_SPRING_USER" --password-stdin
#  script:
#    - pwd
#    - ls
#    # copy: no source 에러의 경우 context( build를 실행한 시점의 현 디렉토리)의 위치가 local 환경과 다르기 때문에 docker build가 실행되는 디랙터리 위치를 파악해야 한다
#    - docker build -t $APP:$MAIN_VERSION --no-cache .
#    - docker tag $APP:$MAIN_VERSION $HARBOR_DOMAIN/$PROJECT/$APP:$MAIN_VERSION
#    # latest version ArgoCD에서 확인할 수 있도록 추가
#    - docker tag $HARBOR_DOMAIN/$PROJECT/$APP:$MAIN_VERSION $HARBOR_DOMAIN/$PROJECT/$APP:latest
#    - docker push $HARBOR_DOMAIN/$PROJECT/$APP:$MAIN_VERSION
#    - docker push $HARBOR_DOMAIN/$PROJECT/$APP:latest

# test script
update_manifest_repo:
  tags:
    - Legacy
  stage: update_deploy_repo
  variables:
    GIT_STRATEGY: none
  retry: 2
  before_script:
    - rm -rf oq-chart
  script:
    # Add SSH key to root
#    - mkdir -p /root/.ssh
#    - echo "$SSH_PRIVATE_KEY" > /root/.ssh/id_rsa
#    - ssh-keyscan -H gitlab.cherry-solutions.com > /root/.ssh/known_hosts
#    - chmod 600 /root/.ssh/id_rsa
    # Git
#    - apt add --no-cache git
    - echo "$GIT_USER_NAME, $GIT_USER_EMAIL, $CD_GIT_REPOSITORY"
    - git config --global user.name $GIT_USER_NAME
    - git config --global user.email $GIT_USER_EMAIL
    - git clone --single-branch --branch main $CD_GIT_REPOSITORY
    - cd oq-chart/
    # Helm
    - sed -i 's/".*"/"$MAIN_VERSION"/g' oq-dev/Chart.yaml
    - cat oq-dev/Chart.yaml
    - git add .
    - git commit -m "test"
    - git push
