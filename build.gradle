buildscript {
    ext{
        queryDslVersion='4.4.0'
        redisVersion='2.5.4'
    }
}

plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'java'
    id "com.github.node-gradle.node" version "3.1.0"
}

group = 'com.tys'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    // Log4j2
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation group:'com.fasterxml.jackson.dataformat', name:'jackson-dataformat-yaml' ,version:'2.10.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.apache.logging.log4j:log4j-web:2.12.1'

    // QueryDsl
    implementation ("com.querydsl:querydsl-apt:${queryDslVersion}")
    implementation ("com.querydsl:querydsl-jpa:${queryDslVersion}")
    implementation group: 'com.querydsl', name: 'querydsl-sql', version: queryDslVersion
    annotationProcessor ("com.querydsl:querydsl-apt:${queryDslVersion}:jpa")
    testImplementation ("com.querydsl:querydsl-jpa:${queryDslVersion}")
    testAnnotationProcessor ("com.querydsl:querydsl-apt:${queryDslVersion}:jpa")

	// JWT
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'

    // Vue auto build
	implementation group:'javax.annotation', name:'javax.annotation-api', version:'1.3.2'
	annotationProcessor 'javax.annotation:javax.annotation-api:1.3.2'

    // Spring Cache related(contains Ehcache)
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.ehcache:ehcache:3.8.0'
    implementation 'javax.cache:cache-api:1.0.0'

    // Monitoring tool: Actuator
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.5.5'

    // Redis
    //implementation group:'org.springframework.boot', name:'spring-boot-starter-data-redis', version: redisVersion


    // lombok test 설정
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

asciidoctor.doFirst{ // asciidoctor 실행 전 기존 API문서 삭제(지우고 재생성하기 위해)
	println "===== start asciidoctor"
	delete file("src/main/resources/static/docs")
}

asciidoctor.doLast{
	println "===== finish asciidoctor"
}
task copyDocument(type:Copy){
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs") // resources/static/docs로 doc html파일을 복사, 서버가 돌아갈 때, /docs/XX.html파일을 보기 위해
}

build{
	dependsOn copyDocument
}

bootJar {
	dependsOn asciidoctor
    copy{
        from "${asciidoctor.outputDir}"
        into 'BOOT-INF/classes/static/docs'
    }
}

jar{
    enabled(false)
}
